# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.ACTION_TOKEN }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v1
        with:
          arguments: build

      - name: 스프링부트 애플리케이션 빌드 # (1)
        run: ./gradlew build
        # 스프링 부트 애플리케이션을 빌드합니다.

      - name: 도커 이미지 빌드 # (2)
        run: docker build -t ${{ secrets.DOCKERHUB_REPO }}/homemate .
        # 스프링 부트 애플리케이션의 도커 이미지를 빌드합니다.
       
      - name: Docker Hub 로그인 # (3)
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
        # Docker Hub에 로그인합니다.

      - name: Docker Hub 퍼블리시 # (4)
        run: docker push ${{ secrets.DOCKERHUB_REPO }}/homemate
        # 빌드한 도커 이미지를 Docker Hub에 푸시합니다.
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      #학교 서버에 로그인해 docker image pull & run : https://github.com/appleboy/ssh-action
      - name: SERVER login and docker image pull and run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
            sudo docker stop $(sudo docker ps -aq)
            sudo docker rm -f $(sudo docker ps -aq)
            sudo docker pull ${{ secrets.DOCKERHUB_REPO }}/homemate
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKERHUB_REPO }}/homemate
            sudo docker image prune -f
            ps -ef | grep java
